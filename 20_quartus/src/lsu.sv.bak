import pipeline_pkg::lsu_t;

module lsu #(parameter int DMEM_DEPTH  = 12,
             parameter int I_MEM_DEPTH = 8,
             parameter int O_MEM_DEPTH = 8)(
    input  logic            i_clk            ,
    input  logic            i_rstn           ,
    input  logic            i_invalidate     ,
    input  lsu_t            i_lsu_ctrl_pkg   ,
    input  logic    [31:0]  i_effective_addr ,
    output logic    [31:0]  o_lsu_load_data  ,

    // Peripherals
    input  logic    [31:0]  i_sw             ,
    input  logic    [31:0]  i_in_port        ,
    output logic    [31:0]  o_out_port_A     ,
    output logic    [31:0]  o_out_port_B     ,
    output logic    [31:0]  o_out_port_C     ,
    output logic    [31:0]  o_out_port_D
);

wire [31:0] address;
wire [31:0] store_data;
wire        load_en;
wire        store_en;
wire        lsu_byte;
wire        lsu_halfword;
wire        lsu_signed;
wire        valid;


assign address      = i_effective_addr;
assign store_data   = i_lsu_ctrl_pkg.store_data;
assign lsu_byte     = i_lsu_ctrl_pkg.lsu_byte;
assign lsu_halfword = i_lsu_ctrl_pkg.lsu_halfword;
assign lsu_signed   = i_lsu_ctrl_pkg.lsu_signed;
assign valid        = i_lsu_ctrl_pkg.valid & ~i_invalidate;
assign load_en      = i_lsu_ctrl_pkg.load_en & valid;
assign store_en     = i_lsu_ctrl_pkg.store_en & valid;


// Data   Memory:      0x000  --> 0x3FF    (12'b0000_0000_0000  --> 12'b0011_1111_1111)
// Input  Peripheral:  0x400  --> 0x4FF    (12'b0100_0000_0000  --> 12'b0100_1111_1111)
// Output Peripheral:  0x500  --> 0x5FF    (12'b0101_0000_0000  --> 12'b0101_1111_1111)

logic dmem_region_en;  // Indicate the address enables Data Memory       region  
logic imem_region_en;  // Indicate the address enables Input  Peripheral region  
logic omem_region_en;  // Indicate the address enables Output Peripheral region  
logic unused_region;

assign unused_region = ~|(address[31:11]);

assign dmem_region_en = (unused_region) & (~address[10]);   
assign imem_region_en = (unused_region) & ( address[10] & ~address[9] & ~address[8]);
assign omem_region_en = (unused_region) & ( address[10] & ~address[9] &  address[8]);

// ================================== MEMORY ACCESS ============================
logic [31:0] wdata;
logic [31:0] dmem_rdata;
logic [3:0]  bytemask;

assign bytemask[0] = 1'b1;                       // HIGH for Word, Halfword, Byte operations
assign bytemask[1] = ~lsu_byte;                  // HIGH for Word, Halfword       operations
assign bytemask[2] = ~lsu_byte & ~lsu_halfword;  // HIGH for Word                 operations
assign bytemask[3] = ~lsu_byte & ~lsu_halfword;  // HIGH for Word                 operations

assign wdata[7:0]   = store_data[7:0]   & {8{bytemask[0]}};
assign wdata[15:8]  = store_data[15:8]  & {8{bytemask[1]}};
assign wdata[23:16] = store_data[23:16] & {8{bytemask[2]}};
assign wdata[31:24] = store_data[31:24] & {8{bytemask[3]}};

// --------------------------------- Data Memory ----------------------
logic dmem_wren;
assign dmem_wren = store_en & dmem_region_en;

data_memory  #(.DMEM_DEPTH(DMEM_DEPTH))   D_cache(
    .i_clk   (i_clk     ),
    .i_rstn  (i_rstn    ),
    .i_addr  (address   ),  // Read/Write Address
    .i_wren  (store_en  ),  // Write Enable
    .i_wdata (wdata     ),  // Write Data
    .o_rdata (dmem_rdata)   // Read  Data
);



// ------------------------------ Input Peripheral ---------------------
logic [7:0]  I_peripheral_mem  [2**I_MEM_DEPTH -1];
logic [31:0] I_peripheral_mem_rdata;

always_ff @(posedge i_clk or negedge i_rstn) begin
    if (!i_rstn)   for (int i=0; i<256; i++)       I_peripheral_mem[i] <= 0;
    else begin
        I_peripheral_mem['h0]  <= i_sw[7:0]  ;         // 0x00 -> 0x0F = Switch data  
        I_peripheral_mem['h1]  <= i_sw[15:8] ;    
        I_peripheral_mem['h2]  <= i_sw[23:16];    
        I_peripheral_mem['h3]  <= i_sw[31:24];   

        I_peripheral_mem['h10] <= i_in_port[7:0]  ;   // 0x10 -> 0x1F = Input PORT  
        I_peripheral_mem['h11] <= i_in_port[15:8] ;    
        I_peripheral_mem['h12] <= i_in_port[23:16];    
        I_peripheral_mem['h13] <= i_in_port[31:24];        
    end
end



always_ff @(posedge i_clk) begin
    if (imem_region_en) begin
        I_peripheral_mem_rdata[7:0]   <= I_peripheral_mem[address    ]; // Synchronous Read
        I_peripheral_mem_rdata[15:8]  <= I_peripheral_mem[address + 1]; // Synchronous Read
        I_peripheral_mem_rdata[23:16] <= I_peripheral_mem[address + 2]; // Synchronous Read
        I_peripheral_mem_rdata[31:24] <= I_peripheral_mem[address + 3]; // Synchronous Read
    end
    else begin
        I_peripheral_mem_rdata[7:0]   <= I_peripheral_mem_rdata[7:0]  ;
        I_peripheral_mem_rdata[15:8]  <= I_peripheral_mem_rdata[15:8] ;
        I_peripheral_mem_rdata[23:16] <= I_peripheral_mem_rdata[23:16];
        I_peripheral_mem_rdata[31:24] <= I_peripheral_mem_rdata[31:24];
    end
end



// ------------------------------ Output Peripheral ---------------------
logic [7:0]  O_peripheral_mem [2**O_MEM_DEPTH -1];
logic [31:0] O_peripheral_mem_rdata;

always_ff @(posedge i_clk or negedge i_rstn) begin
    if (!i_rstn)    for (int i=0; i<256; i++)        O_peripheral_mem[i] <= 0;
    else if (store_en && omem_region_en) begin
            O_peripheral_mem[address    ] <= wdata[7:0]  ;
            O_peripheral_mem[address + 1] <= wdata[15:8] ;
            O_peripheral_mem[address + 2] <= wdata[23:16];
            O_peripheral_mem[address + 3] <= wdata[31:24];
    end
end


always_ff @(posedge i_clk) begin
    if (omem_region_en) begin
        O_peripheral_mem_rdata[7:0]   <= O_peripheral_mem[address    ]; // Synchronous Read
        O_peripheral_mem_rdata[15:8]  <= O_peripheral_mem[address + 1]; // Synchronous Read
        O_peripheral_mem_rdata[23:16] <= O_peripheral_mem[address + 2]; // Synchronous Read
        O_peripheral_mem_rdata[31:24] <= O_peripheral_mem[address + 3]; // Synchronous Read
    end
    else begin
        O_peripheral_mem_rdata[7:0]   <= O_peripheral_mem_rdata[7:0]   ;
        O_peripheral_mem_rdata[15:8]  <= O_peripheral_mem_rdata[15:8]  ;
        O_peripheral_mem_rdata[23:16] <= O_peripheral_mem_rdata[23:16] ;
        O_peripheral_mem_rdata[31:24] <= O_peripheral_mem_rdata[31:24] ;
    end
end




// ------------------------------- Select Load Data ---------------------------
logic [31:0] mem_data;

logic [31:0] address_d,      address_q;      
logic        load_en_d,      load_en_q;     
logic        lsu_byte_d,     lsu_byte_q;     
logic        lsu_halfword_d, lsu_halfword_q; 
logic        lsu_signed_d,   lsu_signed_q;   
logic        valid_d,        valid_q;        

assign address_d       = address; 
assign load_en_d       = load_en;  
assign lsu_byte_d      = lsu_byte;  
assign lsu_halfword_d  = lsu_halfword;
assign lsu_signed_d    = lsu_signed;
assign valid_d         = valid; 


// Hold data while waiting for D-Cache to return data
always_ff @(posedge i_clk or negedge i_rstn) begin : Registers
    if(!i_rstn) begin
        address_q      <= 'b0;
        load_en_q      <= 'b0;
        lsu_byte_q     <= 'b0;
        lsu_halfword_q <= 'b0;
        lsu_signed_q   <= 'b0;
        valid_q        <= 'b0;
    end
    else begin
        address_q      <= address_d;
        lsu_byte_q     <= lsu_byte_d;
        load_en_q      <= load_en_d;
        lsu_halfword_q <= lsu_halfword_d;
        lsu_signed_q   <= lsu_signed_d;
        valid_q        <= valid_d;
    end
end



mux_8x1   Read_data_selection(
        .sel  (address_q[10:8] | {3{~load_en_q}}),
        .i_0  (dmem_rdata                     ),  // Data Memory:       Addr = 0x000  --> 0x0FF
        .i_1  (dmem_rdata                     ),  // Data Memory:       Addr = 0x100  --> 0x1FF 
        .i_2  (dmem_rdata                     ),  // Data Memory:       Addr = 0x200  --> 0x2FF
        .i_3  (dmem_rdata                     ),  // Data Memory:       Addr = 0x300  --> 0x3FF
        .i_4  (I_peripheral_mem_rdata         ),  // Input  Peripheral: Addr = 0x400  --> 0x4FF
        .i_5  (O_peripheral_mem_rdata         ),  // Output Peripheral: Addr = 0x500  --> 0x5FF
        .i_6  (32'b0                          ),  // Reserved: Addr = 0x600 --> 0x6FF
        .i_7  (32'b0                          ),  // Reserved: Addr = 0x700 --> 0x7FF
        .o_mux(mem_data                       )
);


wire  [31:0]     lsu_rdata;         // Wiring only
logic [1:0]      rdata_byte1_sel;    // Select data for byte 1
logic [1:0]      rdata_byte2_3_sel;  // Select data for byte 2 and 3

assign rdata_byte1_sel[0]   =  (lsu_signed_q) & (lsu_byte_q);
assign rdata_byte1_sel[1]   = ~(lsu_signed_q) & (lsu_byte_q);
assign rdata_byte2_3_sel[0] = ~(lsu_signed_q) & (lsu_byte_q) | (lsu_halfword_q);
assign rdata_byte2_3_sel[1] =  (lsu_signed_q) & (lsu_byte_q  |  lsu_halfword_q);


assign lsu_rdata[7:0] = mem_data[7:0];


mux_4x1 #(.WIDTH(8)) rdata_byte_1_sel(
        .sel  (rdata_byte1_sel  ),
        .i_0  (mem_data[15:8]   ),  // For Word & Halfword operations 
        .i_1  ({8{mem_data[7]}} ),  // For signed   Byte operation (Sign Extended of byte 0)
        .i_2  (8'b0             ),  // For unsigned Byre operation (Not sign extended or Not Masked)
        .i_3  (8'b0             ),  // For unsigned Byre operation (Not sign extended or Not Masked)
        .o_mux(lsu_rdata[15:8]  )
);



mux_4x1 #(.WIDTH(16))  rdata_byte_2_3_sel(
        .sel  (rdata_byte2_3_sel ),
        .i_0  (mem_data[31:16]   ),  // For        Word     operation
        .i_1  (16'b0             ),  // For unsigned Byte and Halfword (Not sign extended or Not Masked)
        .i_2  ({16{mem_data[7]}} ),  // For signed Byte     operation  (Sign Extended of byte 0)
        .i_3  ({16{mem_data[15]}}),  // For signed Halfword operation  (Sign Extended of byte 1)
        .o_mux(lsu_rdata[31:16]  )
);




// OUTPUT
assign o_out_port_A = {O_peripheral_mem[8'h03], O_peripheral_mem[8'h02], O_peripheral_mem[8'h01], O_peripheral_mem[8'h00]};
assign o_out_port_B = {O_peripheral_mem[8'h13], O_peripheral_mem[8'h12], O_peripheral_mem[8'h11], O_peripheral_mem[8'h10]};
assign o_out_port_C = {O_peripheral_mem[8'h23], O_peripheral_mem[8'h22], O_peripheral_mem[8'h21], O_peripheral_mem[8'h20]};
assign o_out_port_D = {O_peripheral_mem[8'h33], O_peripheral_mem[8'h32], O_peripheral_mem[8'h31], O_peripheral_mem[8'h30]};


assign o_lsu_load_data = lsu_rdata;



endmodule : lsu



