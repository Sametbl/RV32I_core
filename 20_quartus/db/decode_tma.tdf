--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone V" LPM_DECODES=16 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 23.1 cbx_cycloneii 2023:11:29:19:36:39:SC cbx_lpm_add_sub 2023:11:29:19:36:39:SC cbx_lpm_compare 2023:11:29:19:36:39:SC cbx_lpm_decode 2023:11:29:19:36:39:SC cbx_mgl 2023:11:29:19:36:47:SC cbx_nadder 2023:11:29:19:36:39:SC cbx_stratix 2023:11:29:19:36:39:SC cbx_stratixii 2023:11:29:19:36:39:SC  VERSION_END


-- Copyright (C) 2023  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.



--synthesis_resources = lut 18 
SUBDESIGN decode_tma
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[15..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[15..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode4596w[1..0]	: WIRE;
	w_anode4605w[3..0]	: WIRE;
	w_anode4622w[3..0]	: WIRE;
	w_anode4632w[3..0]	: WIRE;
	w_anode4642w[3..0]	: WIRE;
	w_anode4652w[3..0]	: WIRE;
	w_anode4662w[3..0]	: WIRE;
	w_anode4672w[3..0]	: WIRE;
	w_anode4682w[3..0]	: WIRE;
	w_anode4694w[1..0]	: WIRE;
	w_anode4701w[3..0]	: WIRE;
	w_anode4712w[3..0]	: WIRE;
	w_anode4722w[3..0]	: WIRE;
	w_anode4732w[3..0]	: WIRE;
	w_anode4742w[3..0]	: WIRE;
	w_anode4752w[3..0]	: WIRE;
	w_anode4762w[3..0]	: WIRE;
	w_anode4772w[3..0]	: WIRE;
	w_data4594w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[15..0] = eq_wire[15..0];
	eq_wire[] = ( ( w_anode4772w[3..3], w_anode4762w[3..3], w_anode4752w[3..3], w_anode4742w[3..3], w_anode4732w[3..3], w_anode4722w[3..3], w_anode4712w[3..3], w_anode4701w[3..3]), ( w_anode4682w[3..3], w_anode4672w[3..3], w_anode4662w[3..3], w_anode4652w[3..3], w_anode4642w[3..3], w_anode4632w[3..3], w_anode4622w[3..3], w_anode4605w[3..3]));
	w_anode4596w[] = ( (w_anode4596w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode4605w[] = ( (w_anode4605w[2..2] & (! w_data4594w[2..2])), (w_anode4605w[1..1] & (! w_data4594w[1..1])), (w_anode4605w[0..0] & (! w_data4594w[0..0])), w_anode4596w[1..1]);
	w_anode4622w[] = ( (w_anode4622w[2..2] & (! w_data4594w[2..2])), (w_anode4622w[1..1] & (! w_data4594w[1..1])), (w_anode4622w[0..0] & w_data4594w[0..0]), w_anode4596w[1..1]);
	w_anode4632w[] = ( (w_anode4632w[2..2] & (! w_data4594w[2..2])), (w_anode4632w[1..1] & w_data4594w[1..1]), (w_anode4632w[0..0] & (! w_data4594w[0..0])), w_anode4596w[1..1]);
	w_anode4642w[] = ( (w_anode4642w[2..2] & (! w_data4594w[2..2])), (w_anode4642w[1..1] & w_data4594w[1..1]), (w_anode4642w[0..0] & w_data4594w[0..0]), w_anode4596w[1..1]);
	w_anode4652w[] = ( (w_anode4652w[2..2] & w_data4594w[2..2]), (w_anode4652w[1..1] & (! w_data4594w[1..1])), (w_anode4652w[0..0] & (! w_data4594w[0..0])), w_anode4596w[1..1]);
	w_anode4662w[] = ( (w_anode4662w[2..2] & w_data4594w[2..2]), (w_anode4662w[1..1] & (! w_data4594w[1..1])), (w_anode4662w[0..0] & w_data4594w[0..0]), w_anode4596w[1..1]);
	w_anode4672w[] = ( (w_anode4672w[2..2] & w_data4594w[2..2]), (w_anode4672w[1..1] & w_data4594w[1..1]), (w_anode4672w[0..0] & (! w_data4594w[0..0])), w_anode4596w[1..1]);
	w_anode4682w[] = ( (w_anode4682w[2..2] & w_data4594w[2..2]), (w_anode4682w[1..1] & w_data4594w[1..1]), (w_anode4682w[0..0] & w_data4594w[0..0]), w_anode4596w[1..1]);
	w_anode4694w[] = ( (w_anode4694w[0..0] & data_wire[3..3]), enable_wire);
	w_anode4701w[] = ( (w_anode4701w[2..2] & (! w_data4594w[2..2])), (w_anode4701w[1..1] & (! w_data4594w[1..1])), (w_anode4701w[0..0] & (! w_data4594w[0..0])), w_anode4694w[1..1]);
	w_anode4712w[] = ( (w_anode4712w[2..2] & (! w_data4594w[2..2])), (w_anode4712w[1..1] & (! w_data4594w[1..1])), (w_anode4712w[0..0] & w_data4594w[0..0]), w_anode4694w[1..1]);
	w_anode4722w[] = ( (w_anode4722w[2..2] & (! w_data4594w[2..2])), (w_anode4722w[1..1] & w_data4594w[1..1]), (w_anode4722w[0..0] & (! w_data4594w[0..0])), w_anode4694w[1..1]);
	w_anode4732w[] = ( (w_anode4732w[2..2] & (! w_data4594w[2..2])), (w_anode4732w[1..1] & w_data4594w[1..1]), (w_anode4732w[0..0] & w_data4594w[0..0]), w_anode4694w[1..1]);
	w_anode4742w[] = ( (w_anode4742w[2..2] & w_data4594w[2..2]), (w_anode4742w[1..1] & (! w_data4594w[1..1])), (w_anode4742w[0..0] & (! w_data4594w[0..0])), w_anode4694w[1..1]);
	w_anode4752w[] = ( (w_anode4752w[2..2] & w_data4594w[2..2]), (w_anode4752w[1..1] & (! w_data4594w[1..1])), (w_anode4752w[0..0] & w_data4594w[0..0]), w_anode4694w[1..1]);
	w_anode4762w[] = ( (w_anode4762w[2..2] & w_data4594w[2..2]), (w_anode4762w[1..1] & w_data4594w[1..1]), (w_anode4762w[0..0] & (! w_data4594w[0..0])), w_anode4694w[1..1]);
	w_anode4772w[] = ( (w_anode4772w[2..2] & w_data4594w[2..2]), (w_anode4772w[1..1] & w_data4594w[1..1]), (w_anode4772w[0..0] & w_data4594w[0..0]), w_anode4694w[1..1]);
	w_data4594w[2..0] = data_wire[2..0];
END;
--VALID FILE
